---
import { formatDate } from "../utils";
import { urlFor } from "../utils/image";
import type { Post } from "../utils/sanity";
import { Card as UICard, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";

interface Props {
  post: Post;
}

const { post } = Astro.props;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ category
const getCategoryColor = (color: string) => {
  const colors: Record<string, string> = {
    blue: "bg-blue-100 text-blue-800 hover:bg-blue-200",
    green: "bg-green-100 text-green-800 hover:bg-green-200", 
    purple: "bg-purple-100 text-purple-800 hover:bg-purple-200",
    red: "bg-red-100 text-red-800 hover:bg-red-200",
    yellow: "bg-yellow-100 text-yellow-800 hover:bg-yellow-200",
    cyan: "bg-cyan-100 text-cyan-800 hover:bg-cyan-200"
  };
  return colors[color] || colors.blue;
};
---

<!-- ‚úÖ Card Component ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Tailwind CSS -->
<UICard className="group relative overflow-hidden border hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
  <!-- ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û -->
  {post.mainImage ? (
    <div class="aspect-video overflow-hidden">
      <img
        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        src={urlFor(post.mainImage).width(500).height(300).url()}
        alt={post.mainImage.alt || ""}
        loading="lazy"
      />
    </div>
  ) : (
    <div class="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
      <span class="text-4xl">üìù</span>
    </div>
  )}

  <!-- Badge ‡πÄ‡∏î‡πà‡∏ô -->
  {post.featured && (
    <div class="absolute top-3 right-3 z-10">
      <Badge className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white shadow-md">
        ‚≠ê ‡πÄ‡∏î‡πà‡∏ô
      </Badge>
    </div>
  )}

  <CardHeader className="pb-3">
    <!-- Categories -->
    {post.categories && post.categories.length > 0 && (
      <div class="flex gap-2 mb-3 flex-wrap">
        {post.categories.slice(0, 2).map(category => (
          <Badge 
            variant="secondary"
            className={`text-xs ${getCategoryColor(category.color || 'blue')}`}
          >
            {category.icon && <span class="mr-1">{category.icon}</span>}
            {category.title}
          </Badge>
        ))}
      </div>
    )}

    <!-- Title -->
    <CardTitle className="text-xl font-bold leading-tight line-clamp-2 group-hover:text-primary transition-colors">
      <a href={`/post/${post.slug.current}`} class="before:absolute before:inset-0">
        {post.title}
      </a>
    </CardTitle>
  </CardHeader>

  <CardContent className="pt-0">
    <!-- Excerpt -->
    <CardDescription className="text-sm text-muted-foreground line-clamp-3 mb-4">
      {post.excerpt}
    </CardDescription>
    
    <!-- Meta Information -->
    <div class="flex items-center gap-3 text-xs text-muted-foreground mb-3 flex-wrap">
      <span class="font-medium">
        {formatDate(post.publishedAt || post._createdAt)}
      </span>
      
      {post.author && (
        <>
          <span>‚Ä¢</span>
          <span>‡πÇ‡∏î‡∏¢ {post.author.name}</span>
        </>
      )}
      
      {post.readingTime && (
        <>
          <span>‚Ä¢</span>
          <span>{post.readingTime} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
        </>
      )}
    </div>
    
    <!-- Tags -->
    {post.tags && post.tags.length > 0 && (
      <div class="flex gap-1.5 flex-wrap">
        {post.tags.slice(0, 3).map(tag => (
          <Badge variant="outline" className="text-xs px-2 py-0.5">
            #{tag}
          </Badge>
        ))}
        {post.tags.length > 3 && (
          <Badge variant="outline" className="text-xs px-2 py-0.5 font-medium">
            +{post.tags.length - 3}
          </Badge>
        )}
      </div>
    )}
  </CardContent>
</UICard>

<!-- ‚úÖ ‡πÉ‡∏ä‡πâ Tailwind CSS ‡πÅ‡∏ó‡∏ô Custom CSS ‡πÅ‡∏•‡πâ‡∏ß -->

