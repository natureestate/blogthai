---
// import { ScheduledPublishing } from '../utils/preview' // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
export interface Props {
  publishedAt?: string | Date; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
  status?: 'draft' | 'published' | 'scheduled' | 'archived' | 'overdue'; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  compact?: boolean; // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
  showCountdown?: boolean; // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
  className?: string; // CSS class ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
}

const { 
  publishedAt, 
  status = 'draft', 
  compact = false, 
  showCountdown = true,
  className = '' 
} = Astro.props;

// ‡πÅ‡∏õ‡∏•‡∏á publishedAt ‡πÄ‡∏õ‡πá‡∏ô Date object
const publishDate = publishedAt ? new Date(publishedAt) : null;
const now = new Date();

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà
let scheduleStatus = status;
if (publishDate && status === 'scheduled') {
  if (publishDate <= now) {
    scheduleStatus = 'overdue'; // ‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
  }
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
const timeInfo = publishDate ? {
  isPast: publishDate <= now,
  days: Math.floor((publishDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)),
  hours: Math.floor(((publishDate.getTime() - now.getTime()) % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
  minutes: Math.floor(((publishDate.getTime() - now.getTime()) % (1000 * 60 * 60)) / (1000 * 60))
} : null;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
const statusConfig = {
  draft: {
    icon: 'üìù',
    text: '‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á',
    description: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà',
    color: 'gray'
  },
  published: {
    icon: '‚úÖ',
    text: '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß',
    description: '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏™‡∏π‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÅ‡∏•‡πâ‡∏ß',
    color: 'green'
  },
  scheduled: {
    icon: '‚è∞',
    text: '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà',
    description: '‡∏à‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
    color: 'blue'
  },
  overdue: {
    icon: '‚ö†Ô∏è',
    text: '‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
    description: '‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß',
    color: 'red'
  },
  archived: {
    icon: 'üì¶',
    text: '‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£',
    description: '‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß',
    color: 'gray'
  }
};

const config = statusConfig[scheduleStatus] || statusConfig.draft;

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZone: 'Asia/Bangkok'
  }).format(date);
};

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
const formatCountdown = (timeInfo: any) => {
  const { days, hours, minutes } = timeInfo;
  
  if (days > 0) {
    return `${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
  } else if (hours > 0) {
    return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  } else {
    return `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
  }
};
---

<div class={`schedule-status status-${config.color} ${compact ? 'compact' : ''} ${className}`}>
  {compact ? (
    <>
      <span class="status-icon" title={config.description}>
        {config.icon}
      </span>
      <span class="status-text">
        {config.text}
      </span>
      {publishedAt && scheduleStatus === 'scheduled' && timeInfo && !timeInfo.isPast && (
        <span class="countdown-text">
          ({formatCountdown(timeInfo)})
        </span>
      )}
    </>
  ) : (
    <div class="status-header">
      <span class="status-icon" title={config.description}>
        {config.icon}
      </span>
      <div class="status-info">
        <div class="status-label">
          {config.text}
          {config.description && (
            <span class="status-description">
              {config.description}
            </span>
          )}
        </div>
        
        {scheduleStatus === 'overdue' && timeInfo && (
          <div class="overdue-warning">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <span>‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {Math.abs(timeInfo.days || 0)} ‡∏ß‡∏±‡∏ô</span>
          </div>
        )}
        
        {publishDate && (
          <div class="publish-date">
            <span class="date-label">
              {scheduleStatus === 'scheduled' ? '‡∏à‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠:' : '‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠:'}
            </span>
            <span class="date-value">
              {formatDate(publishDate)}
            </span>
          </div>
        )}
        
        {showCountdown && scheduleStatus === 'scheduled' && timeInfo && !timeInfo.isPast && (
          <div class="countdown-container">
            <div class="countdown-grid">
              {timeInfo.days > 0 && (
                <div class="countdown-item">
                  <div class="countdown-number">{timeInfo.days}</div>
                  <div class="countdown-label">‡∏ß‡∏±‡∏ô</div>
                </div>
              )}
              {(timeInfo.days > 0 || timeInfo.hours > 0) && (
                <div class="countdown-item">
                  <div class="countdown-number">{timeInfo.hours}</div>
                  <div class="countdown-label">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</div>
                </div>
              )}
              <div class="countdown-item">
                <div class="countdown-number">{timeInfo.minutes}</div>
                <div class="countdown-label">‡∏ô‡∏≤‡∏ó‡∏µ</div>
              </div>
            </div>
            <div class="countdown-text">
              ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å {formatCountdown(timeInfo)}
            </div>
          </div>
        )}
      </div>
    </div>
  )}
</div>

{showCountdown && scheduleStatus === 'scheduled' && timeInfo && !timeInfo.isPast && (
  <div class="countdown-mobile">
    <div class="countdown-text">
      ‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏µ‡∏Å {formatCountdown(timeInfo)}
    </div>
  </div>
)}

<style>
  .schedule-status {
    @apply inline-flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium;
  }
  
  .schedule-status.compact {
    @apply px-2 py-1 text-xs;
  }
  
  /* Status Colors */
  .status-gray {
    @apply bg-gray-100 text-gray-800 border border-gray-200;
  }
  
  .status-blue {
    @apply bg-blue-100 text-blue-800 border border-blue-200;
  }
  
  .status-green {
    @apply bg-green-100 text-green-800 border border-green-200;
  }
  
  .status-red {
    @apply bg-red-100 text-red-800 border border-red-200;
  }
  
  .status-header {
    @apply flex items-start gap-3;
  }
  
  .status-icon {
    @apply text-lg;
  }
  
  .status-info {
    @apply flex-1 space-y-2;
  }
  
  .status-label {
    @apply font-semibold;
  }
  
  .status-description {
    @apply block text-xs opacity-75 font-normal;
  }
  
  .overdue-warning {
    @apply flex items-center text-red-600 text-sm;
  }
  
  .publish-date {
    @apply text-sm;
  }
  
  .date-label {
    @apply font-medium mr-2;
  }
  
  .date-value {
    @apply opacity-75;
  }
  
  .countdown-container {
    @apply space-y-2;
  }
  
  .countdown-grid {
    @apply flex gap-4;
  }
  
  .countdown-item {
    @apply text-center;
  }
  
  .countdown-number {
    @apply text-2xl font-bold;
  }
  
  .countdown-label {
    @apply text-xs opacity-75;
  }
  
  .countdown-text {
    @apply text-sm opacity-75;
  }
  
  .countdown-mobile {
    @apply md:hidden mt-2 p-2 bg-blue-50 rounded text-center text-sm text-blue-700;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .countdown-grid {
      @apply gap-2;
    }
    
    .countdown-number {
      @apply text-lg;
    }
  }
</style> 