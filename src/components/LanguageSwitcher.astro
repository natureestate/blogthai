---
interface Props {
  currentLang?: string
  className?: string
  compact?: boolean
}

const { 
  currentLang = 'th',
  className = '',
  compact = false
} = Astro.props

// ภาษาที่รองรับ
const languages = [
  {
    code: 'th',
    name: 'ไทย',
    flag: '🇹🇭',
    nativeName: 'ภาษาไทย'
  },
  {
    code: 'en',
    name: 'English',
    flag: '🇺🇸',
    nativeName: 'English'
  }
]

const currentLanguage = languages.find(lang => lang.code === currentLang) || languages[0]
---

<div class={`language-switcher ${compact ? 'compact' : ''} ${className}`}>
  {compact ? (
    <!-- Compact Mode - เฉพาะ Flag -->
    <button 
      class="language-button compact"
      title={`ปัจจุบัน: ${currentLanguage.nativeName}`}
      aria-label="เปลี่ยนภาษา"
      data-current-lang={currentLang}
    >
      <span class="flag">{currentLanguage.flag}</span>
    </button>
  ) : (
    <!-- Full Mode -->
    <div class="language-selector">
      <button 
        class="language-button"
        aria-label="เลือกภาษา"
        data-current-lang={currentLang}
      >
        <span class="flag">{currentLanguage.flag}</span>
        <span class="language-name">{currentLanguage.name}</span>
        <svg class="chevron w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      
      <div class="language-dropdown" role="menu">
        {languages.map((lang) => (
          <button
            class={`language-option ${lang.code === currentLang ? 'active' : ''}`}
            data-lang={lang.code}
            role="menuitem"
            title={`เปลี่ยนเป็น${lang.nativeName}`}
          >
            <span class="flag">{lang.flag}</span>
            <div class="language-info">
              <span class="language-name">{lang.name}</span>
              <span class="native-name">{lang.nativeName}</span>
            </div>
            {lang.code === currentLang && (
              <svg class="check-icon w-4 h-4 ml-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            )}
          </button>
        ))}
      </div>
    </div>
  )}
</div>

<script>
  class LanguageSwitcher {
    private button: HTMLElement | null
    private dropdown: HTMLElement | null
    private isOpen: boolean = false

    constructor() {
      this.button = document.querySelector('.language-button')
      this.dropdown = document.querySelector('.language-dropdown')
      
      this.init()
    }

    init() {
      if (!this.button) return

      // เปิด/ปิด dropdown
      this.button.addEventListener('click', (e) => {
        e.preventDefault()
        this.toggleDropdown()
      })

      // ปิด dropdown เมื่อคลิกข้างนอก
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement
        if (!target.closest('.language-switcher')) {
          this.closeDropdown()
        }
      })

      // จัดการการเลือกภาษา
      if (this.dropdown) {
        this.dropdown.addEventListener('click', (e) => {
          const target = e.target as HTMLElement
          const option = target.closest('.language-option') as HTMLElement
          
          if (option) {
            const selectedLang = option.getAttribute('data-lang')
            if (selectedLang) {
              this.changeLanguage(selectedLang)
            }
          }
        })
      }

      // Keyboard navigation
      this.button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault()
          this.toggleDropdown()
        } else if (e.key === 'Escape') {
          this.closeDropdown()
        }
      })
    }

    toggleDropdown() {
      if (this.isOpen) {
        this.closeDropdown()
      } else {
        this.openDropdown()
      }
    }

    openDropdown() {
      if (!this.dropdown) return
      
      this.isOpen = true
      this.dropdown.classList.add('show')
      this.button?.setAttribute('aria-expanded', 'true')
      
      // Focus first option
      const firstOption = this.dropdown.querySelector('.language-option') as HTMLElement
      firstOption?.focus()
    }

    closeDropdown() {
      if (!this.dropdown) return
      
      this.isOpen = false
      this.dropdown.classList.remove('show')
      this.button?.setAttribute('aria-expanded', 'false')
    }

    changeLanguage(langCode: string) {
      // ปิด dropdown ก่อน
      this.closeDropdown()
      
      // เก็บภาษาที่เลือกใน localStorage
      localStorage.setItem('preferred-language', langCode)
      
      // แจ้ง Google Analytics (ถ้ามี)
      if (typeof window !== 'undefined' && 'gtag' in window) {
        (window as any).gtag('event', 'language_change', {
          'event_category': 'engagement',
          'event_label': langCode
        })
      }
      
      // รีโหลดหน้าด้วยภาษาใหม่
      const currentUrl = new URL(window.location.href)
      const pathSegments = currentUrl.pathname.split('/').filter(Boolean)
      
      // ลบ language code เก่าออก (ถ้ามี)
      if (pathSegments[0] === 'th' || pathSegments[0] === 'en') {
        pathSegments.shift()
      }
      
      // เพิ่ม language code ใหม่ (ถ้าไม่ใช่ default)
      if (langCode !== 'th') {
        pathSegments.unshift(langCode)
      }
      
      // สร้าง URL ใหม่
      const newPath = '/' + pathSegments.join('/')
      const newUrl = currentUrl.origin + newPath + currentUrl.search + currentUrl.hash
      
      // นำทางไปยัง URL ใหม่
      window.location.href = newUrl
    }
  }

  // เริ่มต้น Language Switcher
  document.addEventListener('DOMContentLoaded', () => {
    new LanguageSwitcher()
  })
</script>

<style>
  .language-switcher {
    @apply relative inline-block;
  }
  
  .language-button {
    @apply flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200;
  }
  
  .language-button.compact {
    @apply p-2 rounded-full;
  }
  
  .flag {
    @apply text-base;
  }
  
  .language-name {
    @apply ml-2;
  }
  
  .compact .language-name {
    @apply hidden;
  }
  
  .chevron {
    @apply transition-transform duration-200;
  }
  
  .language-button[aria-expanded="true"] .chevron {
    @apply transform rotate-180;
  }
  
  .language-dropdown {
    @apply absolute top-full left-0 mt-1 w-48 bg-white border border-gray-300 rounded-md shadow-lg z-50 opacity-0 invisible transform scale-95 transition-all duration-200;
  }
  
  .language-dropdown.show {
    @apply opacity-100 visible transform scale-100;
  }
  
  .language-option {
    @apply flex items-center w-full px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 focus:bg-gray-50 focus:outline-none transition-colors duration-150;
  }
  
  .language-option.active {
    @apply bg-blue-50 text-blue-700;
  }
  
  .language-option:first-child {
    @apply rounded-t-md;
  }
  
  .language-option:last-child {
    @apply rounded-b-md;
  }
  
  .language-info {
    @apply ml-3 flex flex-col;
  }
  
  .native-name {
    @apply text-xs text-gray-500;
  }
  
  .check-icon {
    @apply text-blue-600;
  }
  
  /* Responsive */
  @media (max-width: 640px) {
    .language-dropdown {
      @apply w-40;
    }
    
    .language-option {
      @apply px-3 py-2;
    }
  }
  
  /* Animation */
  .language-switcher:hover .language-button {
    @apply shadow-sm;
  }
  
  /* Focus states */
  .language-option:focus {
    @apply ring-2 ring-blue-500 ring-inset;
  }
  
  /* Dark mode support (optional) */
  @media (prefers-color-scheme: dark) {
    .language-button {
      @apply bg-gray-800 border-gray-600 text-gray-200 hover:bg-gray-700;
    }
    
    .language-dropdown {
      @apply bg-gray-800 border-gray-600;
    }
    
    .language-option {
      @apply text-gray-200 hover:bg-gray-700 focus:bg-gray-700;
    }
    
    .language-option.active {
      @apply bg-blue-900 text-blue-200;
    }
    
    .native-name {
      @apply text-gray-400;
    }
  }
</style> 