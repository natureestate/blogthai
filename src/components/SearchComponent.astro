---
import { getSuggestions } from '../utils/search'

// ‡∏£‡∏±‡∏ö props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö posts data
interface Props {
  posts: any[]
  className?: string
}

const { posts, className = '' } = Astro.props

// ‡∏™‡∏£‡πâ‡∏≤‡∏á suggestions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autocomplete
const suggestions = getSuggestions(posts)
---

<div class={`search-component mb-8 ${className}`} data-search-posts={JSON.stringify(posts)}>
  <!-- ‚úÖ Search Input Field -->
  <div class="search-container relative max-w-2xl mx-auto">
    <div class="search-input-wrapper relative flex items-center">
      <!-- Search Icon -->
      <svg 
        class="absolute left-3 w-5 h-5 text-muted-foreground z-10"
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0z"/>
      </svg>
      
      <!-- Input Field -->
      <input 
        type="text" 
        id="search-input"
        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°..."
        class="w-full pl-10 pr-10 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all"
      />
      
      <!-- Clear Button -->
      <button 
        id="clear-search"
        class="absolute right-3 p-1 text-muted-foreground hover:text-foreground transition-colors opacity-0 invisible"
        aria-label="‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>

    <!-- ‚úÖ Suggestions Dropdown -->
    <div id="suggestions" class="absolute top-full left-0 right-0 bg-popover border border-border rounded-lg mt-1 max-h-48 overflow-y-auto z-20 shadow-lg hidden">
      <div class="p-2 space-y-1">
        <div class="suggestions-categories">
          <p class="text-xs font-medium text-muted-foreground uppercase tracking-wide px-2 py-1">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</p>
          {suggestions.categories.map(category => (
            <div class="suggestion-item px-2 py-1.5 text-sm cursor-pointer hover:bg-accent rounded-md transition-colors" data-type="category" data-value={category}>
              üìÅ {category}
            </div>
          ))}
        </div>
        
        <div class="suggestions-tags border-t pt-2">
          <p class="text-xs font-medium text-muted-foreground uppercase tracking-wide px-2 py-1">‡πÅ‡∏ó‡πá‡∏Å‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</p>
          {suggestions.tags.map(tag => (
            <div class="suggestion-item px-2 py-1.5 text-sm cursor-pointer hover:bg-accent rounded-md transition-colors" data-type="tag" data-value={tag}>
              üè∑Ô∏è {tag}
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- ‚úÖ Search Results -->
  <div id="search-results" class="results mt-8 hidden">
    <div class="results-header">
      <h2 class="text-xl font-semibold text-foreground mb-4 pb-2 border-b">
        ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: <span id="search-term" class="text-primary"></span>
      </h2>
    </div>
    
    <div id="results-list" class="results-list space-y-6">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>

  <!-- ‚úÖ No Results Message -->
  <div id="no-results" class="no-results text-center py-12 hidden">
    <div class="flex flex-col items-center space-y-4">
      <svg class="w-16 h-16 text-muted-foreground/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m21 21-6-6m2-5a7 7 0 1 1-14 0 7 7 0 0 1 14 0z"/>
      </svg>
      <div>
        <h3 class="text-lg font-medium text-foreground mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
        <p class="text-muted-foreground text-sm max-w-md">
          ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        </p>
      </div>
    </div>
  </div>
</div>

<script>
  // ‚úÖ Search functionality
  class SearchComponent {
    constructor() {
      this.posts = JSON.parse(document.querySelector('.search-component')?.getAttribute('data-search-posts') || '[]')
      this.searchInput = document.getElementById('search-input')
      this.clearButton = document.getElementById('clear-search')
      this.suggestions = document.getElementById('suggestions')
      this.searchResults = document.getElementById('search-results')
      this.resultsList = document.getElementById('results-list')
      this.noResults = document.getElementById('no-results')
      this.searchTerm = document.getElementById('search-term')
      
      this.init()
    }

    init() {
      if (!this.searchInput) return

      // Event listeners
      this.searchInput.addEventListener('input', this.handleInput.bind(this))
      this.searchInput.addEventListener('focus', this.showSuggestions.bind(this))
      this.searchInput.addEventListener('blur', () => {
        // Delay hiding to allow clicks on suggestions
        setTimeout(() => this.hideSuggestions(), 150)
      })
      
      this.clearButton?.addEventListener('click', this.clearSearch.bind(this))
      
      // Suggestion clicks
      this.suggestions?.addEventListener('click', this.handleSuggestionClick.bind(this))
      
      // Hide suggestions when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
          this.hideSuggestions()
        }
      })
    }

    handleInput(e) {
      const query = e.target.value.trim()
      
      // Show/hide clear button
      if (query.length > 0) {
        this.clearButton?.classList.remove('opacity-0', 'invisible')
        this.clearButton?.classList.add('opacity-100', 'visible')
      } else {
        this.clearButton?.classList.add('opacity-0', 'invisible')
        this.clearButton?.classList.remove('opacity-100', 'visible')
      }

      // Perform search
      if (query.length >= 2) {
        this.performSearch(query)
        this.hideSuggestions()
      } else if (query.length === 0) {
        this.hideResults()
        this.showSuggestions()
      }
    }

    performSearch(query) {
      // Import and use the search function
      import('../utils/search.js').then(({ simpleSearch }) => {
        const results = simpleSearch(this.posts, query)
        this.displayResults(results, query)
      })
    }

    displayResults(results, query) {
      if (!this.searchTerm || !this.resultsList) return

      this.searchTerm.textContent = query
      this.resultsList.innerHTML = ''

      if (results.length === 0) {
        this.showNoResults()
        return
      }

      // Show results
      this.searchResults?.classList.remove('hidden')
      this.noResults?.classList.add('hidden')

      results.forEach(post => {
        const resultItem = this.createResultItem(post)
        this.resultsList.appendChild(resultItem)
      })
    }

    createResultItem(post) {
      const item = document.createElement('article')
      item.className = 'bg-card border border-border rounded-lg p-6 hover:border-primary/50 hover:shadow-md transition-all duration-200'
      
      item.innerHTML = `
        <h3 class="text-xl font-semibold text-foreground mb-2">
          <a href="/post/${post.slug}" class="hover:text-primary transition-colors">
            ${post.title}
          </a>
        </h3>
        
        <p class="text-muted-foreground leading-relaxed mb-4 line-clamp-2">
          ${post.excerpt || post.body?.substring(0, 150) + '...' || ''}
        </p>
        
        <div class="flex flex-wrap items-center gap-3 text-sm text-muted-foreground">
          ${post.publishedAt ? `<time class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            ${new Date(post.publishedAt).toLocaleDateString('th-TH')}
          </time>` : ''}
          
          ${post.category ? `<span class="inline-flex items-center gap-1 px-2 py-1 bg-secondary text-secondary-foreground rounded-md text-xs">
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
            </svg>
            ${post.category.title || post.category}
          </span>` : ''}
          
          ${post.readingTime ? `<span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            ${post.readingTime} ‡∏ô‡∏≤‡∏ó‡∏µ
          </span>` : ''}
        </div>
      `
      
      return item
    }

    showSuggestions() {
      if (this.searchInput?.value.trim() === '') {
        this.suggestions?.classList.remove('hidden')
      }
    }

    hideSuggestions() {
      this.suggestions?.classList.add('hidden')
    }

    hideResults() {
      this.searchResults?.classList.add('hidden')
      this.noResults?.classList.add('hidden')
    }

    showNoResults() {
      this.searchResults?.classList.add('hidden')
      this.noResults?.classList.remove('hidden')
    }

    handleSuggestionClick(e) {
      const suggestionItem = e.target.closest('.suggestion-item')
      if (!suggestionItem) return

      const value = suggestionItem.getAttribute('data-value')
      if (value && this.searchInput) {
        this.searchInput.value = value
        this.performSearch(value)
        this.hideSuggestions()
      }
    }

    clearSearch() {
      if (this.searchInput) {
        this.searchInput.value = ''
        this.searchInput.focus()
      }
      this.clearButton?.classList.add('opacity-0', 'invisible')
      this.hideResults()
      this.showSuggestions()
    }
  }

  // Initialize search component when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SearchComponent()
  })
</script> 